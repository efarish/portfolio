AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: The template used for GraphQL API.

Parameters:
  ProjectName:
    Type: String
  HTTPApiGWAppId:
    Type: String
  ImageUrl:
    Type: String

Resources:

  AppSyncLoggingServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs'

  AppSyncLambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: 
                  - !GetAtt AppFunctions.Arn

  ApiGWLambdaAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda-auth-iam-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - '*'
                Sid: ''

  AppFunctions:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DTLambdaFunctions'
      CodeUri: .
      Description: 'Entry point for application.'
      MemorySize: 128
      Timeout: 10
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      ImageUri: !Ref ImageUrl
      ImageConfig:
        Command:
          - lambda_function.lambda_handler
      PackageType: Image
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ec2:*
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - dynamodb:*
              Resource: '*'

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub "${ProjectName}_GraphQLApi"
      AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
        FieldLogLevel: INFO    

  GraphQLApiKey:
     Type: AWS::AppSync::ApiKey
     Properties:
       ApiId: !GetAtt GraphQLApi.ApiId
  
  AppSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        type User {
          user_name: ID
          role: String
          password: String
        }

        type UserToken {
          user_name: ID
          token: String
        }

        type Query {
          login(user_name: ID!, password: String!): UserToken
          getUser(user_name: ID!): User
        }

        type Mutation {
          createUser(user_name: ID!, role: String!, password: String!): User
        }

        schema {
          query: Query
          mutation: Mutation
        }        

  LambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub ${ProjectName}_DataSource
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppSyncLambdaServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !GetAtt AppFunctions.Arn

  CreateUserResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: createUser
      DataSourceName: !GetAtt LambdaDataSource.Name

  UserLoginResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: login
      DataSourceName: !GetAtt LambdaDataSource.Name

  GetUserUrlResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: AppSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getUser
      DataSourceName: !GetAtt LambdaDataSource.Name

  ApiGWAuthorizer:
      Type: 'AWS::ApiGatewayV2::Authorizer'
      DependsOn: AppFunctions
      Properties:
        Name: !Sub ${ProjectName}ApiGWAuthorizer
        ApiId: !Ref HTTPApiGWAppId
        AuthorizerType: REQUEST
        AuthorizerCredentialsArn: !GetAtt ApiGWLambdaAuthRole.Arn
        AuthorizerPayloadFormatVersion: "2.0"
        EnableSimpleResponses: true
        AuthorizerUri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !Ref AppFunctions 
            - '/invocations'
        AuthorizerResultTtlInSeconds: 30
        IdentitySource:
          - '$request.header.Authorization'

  ApiGatewayGraphQLIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HTTPApiGWAppId
      IntegrationType: HTTP_PROXY
      IntegrationMethod: POST
      IntegrationUri: !GetAtt GraphQLApi.GraphQLUrl
      PayloadFormatVersion: '1.0'
      RequestParameters:
        'append:header.x-api-key': !GetAtt GraphQLApiKey.ApiKey 
      Description: "API GW Integration with AppSync GraphQL API."

  CreateUserRouteGraphQL:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HTTPApiGWAppId
      RouteKey: 'POST /create_user'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayGraphQLIntegration

  LoginRouteGraphQL:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HTTPApiGWAppId
      RouteKey: 'POST /login'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayGraphQLIntegration

  GetUserRouteGraphQL:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HTTPApiGWAppId
      RouteKey: 'POST /get_user'
      AuthorizationType: CUSTOM
      AuthorizerId: !GetAtt ApiGWAuthorizer.AuthorizerId
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGatewayGraphQLIntegration

Outputs:
  GraphQLApi:
    Description: URL of the GraphQL APIs that require authorization.
    Value: !GetAtt GraphQLApi.GraphQLUrl
