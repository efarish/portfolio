AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: The template used to create a ECS cluster and task using ECR image.

Parameters:
  ECSClusterName:
    Type: String
    Description: Specifies the ECS Cluster Name with which the resources would be associated
    Default: ecs1
  ECSServiceName:
    Type: String
    Default: ecs1-service

Resources:

  #---------------------------------------------------------------------
  # Deploys VPC
  #---------------------------------------------------------------------
  VPC:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./vpc.yml

  #---------------------------------------------------------------------
  # Deploys ECS
  #---------------------------------------------------------------------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/ecs1-server
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:        
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ecr-iam-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - '*'
                Sid: ''
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders: 
        - FARGATE
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref "TaskDefinition"
      ServiceName: ecs1-service
      SchedulingStrategy: REPLICA
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups: [!GetAtt VPC.Outputs.SG]
          Subnets:  [!GetAtt "VPC.Outputs.PrivateSubnet1", !GetAtt VPC.Outputs.PrivateSubnet2]
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      ServiceConnectConfiguration:
        Enabled: false
      Tags: []
      EnableECSManagedTags: true
      LoadBalancers:
        - ContainerName: "server"
          ContainerPort: 9090
          TargetGroupArn: !GetAtt VPC.Outputs.LB
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: ecs1-server
      ContainerDefinitions:
        - Name: server
          Image: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/ecs1:server"
          Cpu: '1024'
          PortMappings:
            - Name: '9090'
              ContainerPort: 9090
              HostPort: 9090
              Protocol: tcp
              AppProtocol: http
          Essential: true
          Environment: []
          EnvironmentFiles: []
          MountPoints: []
          VolumesFrom: []
          Ulimits: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              mode: non-blocking
              max-buffer-size: 25m
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
            SecretOptions: []
          SystemControls: []
      TaskRoleArn: !Ref ECSTaskRole
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      NetworkMode: awsvpc
      Volumes: []
      PlacementConstraints: []
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '3072'
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX

  #---------------------------------------------------------------------
  # Deploy API GW VPC Link
  #---------------------------------------------------------------------
  APIGWVPClinkSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt VPC.Outputs.VPCID
      GroupName: vpclink-security-group
      GroupDescription: APIGW vpclink security group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  PrivateAPIGWvpcLink:  
    Type: AWS::ApiGatewayV2::VpcLink
    Properties: 
      Name: private-apigw-vpclink
      SecurityGroupIds: 
        - !Ref APIGWVPClinkSG
      SubnetIds: 
        - !GetAtt "VPC.Outputs.PrivateSubnet1"
        - !GetAtt "VPC.Outputs.PrivateSubnet2"

  # -------------------------------------------------------------------------
  # Deploy API GW HTTP API route and integration to private ALB via VPC Link
  # -------------------------------------------------------------------------
  HttpApiALB:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: alb-HTTP-api
      Description: HTTP API ALB
      ProtocolType: HTTP

  APIRoute1:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApiALB
      RouteKey: 'GET /'
      Target: !Join
        - /
        - - integrations
          - !Ref APIIntegration

  APIRoute2:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApiALB
      RouteKey: 'GET /getInfo'
      Target: !Join
        - /
        - - integrations
          - !Ref APIIntegration

  APIRoute3:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApiALB
      RouteKey: 'POST /upload'
      Target: !Join
        - /
        - - integrations
          - !Ref APIIntegration

  APIIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApiALB
      Description: Private ALB Integration
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      ConnectionType: VPC_LINK
      ConnectionId: 
        !Ref PrivateAPIGWvpcLink
      IntegrationUri: !GetAtt "VPC.Outputs.PublicLBListener" 
      PayloadFormatVersion: '1.0'

  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      AutoDeploy: true
      ApiId: !Ref HttpApiALB

# -------------------------------------------------------------------------
# Information about the stack.
# -------------------------------------------------------------------------
Outputs:
  VpcId:
    Description: VPC ID
    Value: !GetAtt VPC.Outputs.VPCID
  ClusterName:
    Description: The cluster used to create the service.
    Value: !Ref ECSClusterName
  ECSService:
    Description: The created service.
    Value: !Ref ECSService
  PublicLBListener:
    Description: LB Listener ID
    Value: !GetAtt VPC.Outputs.PublicLBListener
  FQDN:
    Description: URL for your application
    Value: !GetAtt VPC.Outputs.PublicLBFQDN
  PrivateSubnet1:
    Description: Private Subnet 1
    Value: !GetAtt "VPC.Outputs.PrivateSubnet1"
  PrivateSubnet2:
    Description: Private Subnet 2
    Value: !GetAtt "VPC.Outputs.PrivateSubnet2"
  APIURL:
    Description: API Gateway URL
    Value: !Sub https://${HttpApiALB}.execute-api.${AWS::Region}.amazonaws.com/ 


    