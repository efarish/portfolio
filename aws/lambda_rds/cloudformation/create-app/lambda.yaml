AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: The template used for Lambda functions.

Parameters:
  VpcId:
    Type: String
    Description: The VPC that lambda is running inside of.
  DeploymentSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of deployment subnet ID's.
  ImageUrl:
    Type: String
    Description: The url of a docker image that contains the task application.
  LambdaSecurityGroup:
    Type: String

Resources:

  LambdaRdsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'LambdaRdsFunction'
      CodeUri: .
      Description: 'A Lambda To Test Connecting to RDS.'
      MemorySize: 128
      Timeout: 10
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      ImageUri: !Ref ImageUrl
      ImageConfig:
        Command:
          - lambda_function.lambda_handler
      PackageType: Image
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ec2:*
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - secretsmanager:*
              Resource: '*'
      SnapStart:
        ApplyOn: None
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaSecurityGroup]
        SubnetIds: !Ref DeploymentSubnetIds
        Ipv6AllowedForDualStack: false
      Events:
        Api1:
          Type: HttpApi
          Properties:
            Path: /health_check
            Method: get
            ApiId: !Ref LambdaApi 
        Api2:
          Type: HttpApi
          Properties:
            Path: /create_schema
            Method: post
            ApiId: !Ref LambdaApi
        Api3:
          Type: HttpApi
          Properties:
            Path: /create_admin_user
            Method: post
            ApiId: !Ref LambdaApi
        Api4:
          Type: HttpApi
          Properties:
            Path: /create_user
            Method: post
            ApiId: !Ref LambdaApi

  LambdaApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref APIStage
      #MethodSettings:
      #  - ResourcePath: "/*"
      #    HttpMethod: "*"

  APILogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Sub /aws/apigateway/LambdaRdsFunction
        RetentionInDays: 1

  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: $default
      AutoDeploy: true
      ApiId: !Ref LambdaApi
      AccessLogSettings:
        DestinationArn: !GetAtt APILogGroup.Arn 
        Format: '{ "requestId": "$context.requestId", "integrationErr": "$context.integrationErrorMessage", "path": "$context.path", "routeKey": "$context.routeKey", "ip": "$context.identity.sourceIp", "requestTime": "$context.requestTime", "httpMethod": "$context.httpMethod","statusCode": $context.status }'      

Outputs:
  LambdaRdsFunctionArn:
    Description: Arn of Lambda function.
    Value: !GetAtt LambdaRdsFunction.Arn
  LambdaRdsFunctionUrl:
    Description: "URL of the HTTP API"
    Value: !Sub https://${LambdaApi}.execute-api.${AWS::Region}.amazonaws.com #!GetAtt LambdaRdsFunction.FunctionUrl #!Ref LambdaApi  # This will be the HttpApiUrl output

  

