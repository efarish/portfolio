AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: The template a Lambda function using Docker.

Parameters:
  ProjectName:
    Type: String
    Description: Name of the project.
    Default: "Lambda Connecting to RDS."

Resources:

  #---------------------------------------------------------------------
  # Deploys VPC
  #---------------------------------------------------------------------
  VPC:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./vpc.yml

  #---------------------------------------------------------------------
  # Security Groups for resources.
  #---------------------------------------------------------------------
  VpcEndPointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Interface Endpoint.
      VpcId: !GetAtt VPC.Outputs.VpcId

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function.
      VpcId: !GetAtt VPC.Outputs.VpcId
      SecurityGroupEgress:
        - Description: Allow the Lambda to communicate to the VPC endpoint.
          IpProtocol: -1
          DestinationSecurityGroupId: !Ref VpcEndPointSecurityGroup  

  VpcEPIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow Lambda to call VPC endpoint.
      GroupId: !Ref VpcEndPointSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # Lambda stack
  LambdaStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./lambda.yaml
      Parameters:
        VpcId: !GetAtt VPC.Outputs.VpcId
        DeploymentSubnetIds: !GetAtt VPC.Outputs.PublicSubnetIds
        ImageUrl: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/ecs1:lambda_rds
        LambdaSecurityGroup: !Ref LambdaSecurityGroup

 # RDS stack
  RDSStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./rds.yaml
      Parameters:
        VpcId: !GetAtt VPC.Outputs.VpcId
        DeploymentSubnetIds: !GetAtt VPC.Outputs.PublicSubnetIds
        LambdaSecurityGroup: !Ref LambdaSecurityGroup

  # DB Secrets Manager
  DBSecrets:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::SecretsManager::Secret"
    DeletionPolicy: "Delete"
    Properties:
      Name: "lambda_rds/secret"
      SecretString:
        Fn::Join: 
        - ' '
        - - '{"DB_URL": "postgresql+psycopg://testadmin:a_password_@database-1.cluster-c4bkhqxdo40l.us-east-1.rds.amazonaws.com:5432/testdb",'
          - '"DB_URL_ASYNC": "postgresql+asyncpg://testadmin:a_password_@database-1.cluster-c4bkhqxdo40l.us-east-1.rds.amazonaws.com:5432/testdb"}'

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      IpAddressType: ipv4
      DnsOptions:
        PrivateDnsOnlyForInboundResolverEndpoint: NotSpecified
        DnsRecordIpType: ipv4
      SecurityGroupIds: [!Ref VpcEndPointSecurityGroup]
      SubnetIds: !Split [",", !GetAtt VPC.Outputs.PublicSubnetIds]
      VpcId: !GetAtt VPC.Outputs.VpcId
      RouteTableIds: []
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      PolicyDocument:
        Statement:
          - Resource: '*'
            Action: '*'
            Effect: Allow
            Principal: '*'

# -------------------------------------------------------------------------
# Information about the stack.
# -------------------------------------------------------------------------
Outputs:
  RDSClusterEndpoint:
    Description: URL of RDS cluster.
    Value: !GetAtt RDSStack.Outputs.RDSClusterEndpoint
